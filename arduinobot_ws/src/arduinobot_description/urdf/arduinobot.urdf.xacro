<?xml version="1.0"?>

<!-- ros2 launch urdf_tutorial display.launch.py model:=/home/raz/projects/manipulator-project/arduinobot_ws/src/arduinobot_description/urdf/arduinobot.urdf.xacro -->

<robot xmlns:xacro="http://www.ros.org/wiki/xacro" name="arduinobot">

    <xacro:property name="PI" value="3.141592653589793" />
    <xacro:property name="effort" value="30.0" />
    <xacro:property name="velocity" value="10.0" />

    <xacro:macro name="default_inertial" params="mass"> <!-- not the actual inertia, just a placeholder -->
        <inertial>
            <mass value="${mass}" />
            <inertia ixx="1.0" ixy="0" ixz="0"
                     iyy="1.0" iyz="0"
                     izz="1.0" />
        </inertial>
    </xacro:macro>

    <link name="world" />

    <link name="base_link">
        <visual>
            <geometry>
                <mesh filename="package://arduinobot_description/meshes/basement.STL" scale="0.01 0.01 0.01" />
            </geometry>
            <origin xyz="-0.5 -0.5 0" rpy="0 0 0" /> <!-- needed in order to render the mesh properly -->
        </visual>
        <collision>
            <geometry>
                <mesh filename="package://arduinobot_description/meshes/basement.STL" scale="0.01 0.01 0.01" />   
            </geometry>
            <origin xyz="-0.5 -0.5 0" rpy="0 0 0" />
        </collision>
        <xacro:default_inertial mass="1.0" />
    </link>

    <link name="base_plate">
        <visual>
            <geometry>
                <mesh filename="package://arduinobot_description/meshes/base_plate.STL" scale="0.01 0.01 0.01" />
            </geometry>
            <origin xyz="-0.39 -0.39 -0.56" rpy="0 0 0" /> <!-- needed in order to render the mesh properly -->
        </visual>
        <collision>
            <geometry>
                <mesh filename="package://arduinobot_description/meshes/base_plate.STL" scale="0.01 0.01 0.01" />
            </geometry>
            <origin xyz="-0.39 -0.39 -0.56" rpy="0 0 0" />
        </collision>
        <xacro:default_inertial mass="1.0" />
    </link>

    <link name="forward_drive_arm_link">
        <visual>
            <geometry>
                <mesh filename="package://arduinobot_description/meshes/forward_drive_arm.STL" scale="0.01 0.01 0.01" />
            </geometry>
            <origin xyz="0.19 0.06 -0.08" rpy="0 -${PI/2} ${PI/2}" /> <!-- needed in order to render the mesh properly -->
        </visual>
        <collision>
            <geometry>
                <mesh filename="package://arduinobot_description/meshes/forward_drive_arm.STL" scale="0.01 0.01 0.01" />
            </geometry>
            <origin xyz="0.19 0.06 -0.08" rpy="0 -${PI/2} ${PI/2}" />
        </collision>
        <xacro:default_inertial mass="1.0" />
    </link>

    <link name="horizontal_arm_link">
        <visual>
            <geometry>
                <mesh filename="package://arduinobot_description/meshes/horizontal_arm.STL" scale="0.01 0.01 0.01" />
            </geometry>
            <origin xyz="-0.03 -0.4 -0.06" rpy="${PI/2} 0 ${PI/2}" /> <!-- needed in order to render the mesh properly -->
            </visual>
        <collision>
            <geometry>
                <mesh filename="package://arduinobot_description/meshes/horizontal_arm.STL" scale="0.01 0.01 0.01" />
            </geometry>
            <origin xyz="-0.03 -0.4 -0.06" rpy="${PI/2} 0 ${PI/2}" />
        </collision>
        <xacro:default_inertial mass="1.0" />
    </link>

    <link name="claw_support_link">
        <visual>
            <geometry>
                <mesh filename="package://arduinobot_description/meshes/claw_support.STL" scale="0.01 0.01 0.01" />
            </geometry>
            <origin xyz="0 -0.05 -0.15" rpy="0 0 ${PI/2}" /> <!-- needed in order to render the mesh properly -->
        </visual>
        <collision>
            <geometry>
                <mesh filename="package://arduinobot_description/meshes/claw_support.STL" scale="0.01 0.01 0.01" />
            </geometry>
            <origin xyz="0 -0.05 -0.15" rpy="0 0 ${PI/2}" />
        </collision>
        <xacro:default_inertial mass="0.05" />
    </link>

    <link name="gripper_right_link">
        <visual>
            <geometry>
                <mesh filename="package://arduinobot_description/meshes/right_finger.STL" scale="0.01 0.01 0.01" />
            </geometry>
            <origin xyz="-0.1 0.50 -0.1" rpy="0 0 -${PI/2}" /> <!-- needed in order to render the mesh properly -->
        </visual>
        <collision>
            <geometry>
                <mesh filename="package://arduinobot_description/meshes/right_finger.STL" scale="0.01 0.01 0.01" />
            </geometry>
            <origin xyz="-0.1 0.50 -0.1" rpy="0 0 -${PI/2}" />
        </collision>
        <xacro:default_inertial mass="0.01" />
    </link>

    <link name="gripper_left_link">
        <visual>
            <geometry>
                <mesh filename="package://arduinobot_description/meshes/left_finger.STL" scale="0.01 0.01 0.01" />
            </geometry>
            <origin xyz="-0.04 0.50 -0.1" rpy="0 0 -${PI/2}" /> <!-- needed in order to render the mesh properly -->
        </visual>
        <collision>
            <geometry>
                <mesh filename="package://arduinobot_description/meshes/left_finger.STL" scale="0.01 0.01 0.01" />
            </geometry>
            <origin xyz="-0.04 0.50 -0.1" rpy="0 0 -${PI/2}" />
        </collision>
        <xacro:default_inertial mass="0.01" />
    </link>

    <link name="rgb_camera">
        <visual>
            <geometry>
                <mesh filename="package://arduinobot_description/meshes/pi_camera.STL" scale="0.01 0.01 0.01" />
            </geometry>
            <origin xyz="-0.1 0.125 0.135" rpy="-${PI/2} 0 -${PI/2}" /> <!-- needed in order to render the mesh properly -->    
        </visual>
        <collision>
            <geometry>
                <mesh filename="package://arduinobot_description/meshes/pi_camera.STL" scale="0.01 0.01 0.01" />
            </geometry>
            <origin xyz="-0.1 0.125 0.135" rpy="-${PI/2} 0 -${PI/2}" />
        </collision>
        <xacro:default_inertial mass="0.001" />
    </link>


    <!-- Joints -->

    <joint name="virtual_joint" type="fixed">
        <parent link="world" />
        <child link="base_link" />
        <origin xyz="0 0 0" rpy="0 0 0" /> <!-- needed in order to fix the base_link to the world -->
    </joint>

    <joint name="base_link_to_base_plate" type="revolute">
        <parent link="base_link" />
        <child link="base_plate" />
        <axis xyz="0 0 1" />
        <origin xyz="0 0 0.307" rpy="0 0 0" /> <!-- needed in order to fix the base_plate to the base_link -->
        <limit lower="-${PI/2}" upper="${PI/2}" effort="${effort}" velocity="${velocity}" />
    </joint>

    <joint name="base_plate_to_forward_drive_arm" type="revolute">
        <parent link="base_plate" />
        <child link="forward_drive_arm_link" />
        <axis xyz="1 0 0" />
        <origin xyz="-0.02 0 0.35" rpy="0 0 0" /> <!-- needed in order to fix the forward_drive_arm to the base_plate -->
        <limit lower="-${PI/2}" upper="${PI/2}" effort="${effort}" velocity="${velocity}" />
    </joint>

    <joint name="forward_drive_arm_to_horizontal_arm" type="revolute">
        <parent link="forward_drive_arm_link" />
        <child link="horizontal_arm_link" />
        <axis xyz="1 0 0" />
        <origin xyz="0 0 0.8" rpy="0 0 0" /> <!-- needed in order to fix the horizontal_arm to the forward_drive_arm -->
        <limit lower="-${PI/2}" upper="${PI/2}" effort="${effort}" velocity="${velocity}" />
    </joint>

    <joint name="horizontal_arm_to_claw_support" type="fixed">
        <parent link="horizontal_arm_link" />
        <child link="claw_support_link" />
        <origin xyz="0 0.82 0" rpy="0 0 0" /> <!-- needed in order to fix the claw_support to the horizontal_arm -->
    </joint>

    <joint name="claw_support_to_gripper_right" type="revolute">
        <parent link="claw_support_link" />
        <child link="gripper_right_link" />
        <axis xyz="0 0 1" />
        <origin xyz="-0.04 0.13 -0.1" rpy="0 0 0" /> <!-- needed in order to fix the gripper_right to the claw_support -->
        <limit lower="-${PI/2}" upper="0.0" effort="${effort}" velocity="${velocity}" />
    </joint>

    <joint name="claw_support_to_gripper_left" type="revolute">
        <parent link="claw_support_link" />
        <child link="gripper_left_link" />
        <axis xyz="0 0 1" />
        <origin xyz="-0.22 0.13 -0.1" rpy="0 0 0" /> <!-- needed in order to fix the gripper_left to the claw_support -->
        <mimic joint="claw_support_to_gripper_right" multiplier="-1" /> <!-- needed to make the grippers move in opposite directions -->
        <limit lower="0.0" upper="${PI/2}" effort="${effort}" velocity="${velocity}" />
    </joint>

    <joint name="rgb_camera_to_base_link" type="fixed">
        <parent link="base_link" />
        <child link="rgb_camera" />
        <origin xyz="0 0.45 0.2" rpy="0 -0.5 ${PI/2}" /> <!-- needed in order to fix the rgb_camera to the base_link -->
    </joint>

    <!-- Gazebo Camera Plugin -->
    
    <gazebo reference="rgb_camera">
        <sensor type="camera" name="rgb_camera">
            <always_on>true</always_on>
            <update_rate>30.0</update_rate>

          <camera name="rgb_camera">
            <horizontal_fov>1.15</horizontal_fov>
            <vertical_fov>0.71</vertical_fov>
            <image>
                <width>2304</width>
                <height>1296</height>
                <format>R8G8B8</format>
            </image>
            <clip>
                <near>0.01</near>
                <far>50</far>
            </clip>
          </camera>


          <plugin name="camera_controller" filename="libgazebo_ros_camera.so">
            <ros>
              <remapping>image_raw:=image_raw</remapping>
              <remapping>camera_info:=camera_info</remapping>
            </ros>
            <camera_name>rgb_camera</camera_name>
            <frame_name>rgb_camera</frame_name>
            <hack_baseline>0.07</hack_baseline>
            </plugin>
        </sensor>
    </gazebo>


</robot>